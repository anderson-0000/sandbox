apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: nginx-c8fdc19c
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.25.4
    helm.sh/chart: nginx-15.14.0
  name: nginx-c8fdc19c
  namespace: testtesttest
spec:
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: nginx-c8fdc19c
      app.kubernetes.io/name: nginx
  policyTypes:
    - Ingress
    - Egress
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nginx-c8fdc19c
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.25.4
    helm.sh/chart: nginx-15.14.0
  name: nginx-c8fdc19c
  namespace: testtesttest
automountServiceAccountToken: false
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: nginx-c8fdc19c
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.25.4
    helm.sh/chart: nginx-15.14.0
  name: nginx-c8fdc19c
  namespace: testtesttest
spec:
  externalTrafficPolicy: Cluster
  ports:
    - name: http
      port: 8080
      targetPort: http
  selector:
    app.kubernetes.io/instance: nginx-c8fdc19c
    app.kubernetes.io/name: nginx
  sessionAffinity: None
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: nginx-c8fdc19c
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.25.4
    helm.sh/chart: nginx-15.14.0
  name: nginx-c8fdc19c
  namespace: testtesttest
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: nginx-c8fdc19c
      app.kubernetes.io/name: nginx
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: nginx-c8fdc19c
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nginx
        app.kubernetes.io/version: 1.25.4
        helm.sh/chart: nginx-15.14.0
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: nginx-c8fdc19c
                    app.kubernetes.io/name: nginx
                topologyKey: kubernetes.io/hostname
              weight: 1
      automountServiceAccountToken: false
      containers:
        - env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: NGINX_HTTP_PORT_NUMBER
              value: "8080"
          image: docker.io/bitnami/nginx:1.25.4-debian-12-r3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: http
            timeoutSeconds: 5
          name: nginx
          ports:
            - containerPort: 8080
              name: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            tcpSocket:
              port: http
            timeoutSeconds: 3
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /tmp
              name: empty-dir
              subPath: tmp-dir
            - mountPath: /opt/bitnami/nginx/conf
              name: empty-dir
              subPath: app-conf-dir
            - mountPath: /opt/bitnami/nginx/logs
              name: empty-dir
              subPath: app-logs-dir
            - mountPath: /opt/bitnami/nginx/tmp
              name: empty-dir
              subPath: app-tmp-dir
      hostIPC: false
      hostNetwork: false
      initContainers:
        - args:
            - -ec
            - |
              #!/bin/bash
              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/nginx/logs; then
                cp -r /opt/bitnami/nginx/logs /emptydir/app-logs-dir
              fi
          command:
            - /bin/bash
          image: docker.io/bitnami/nginx:1.25.4-debian-12-r3
          imagePullPolicy: IfNotPresent
          name: preserve-logs-symlinks
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /emptydir
              name: empty-dir
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: nginx-c8fdc19c
      shareProcessNamespace: false
      volumes:
        - emptyDir: {}
          name: empty-dir
